////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// SASS Utilities v2.0       ///////////////////////////////////////////////////
// By: Kyle Brumm            ///////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// --------------------------------------------------
// BREAKPOINTS
// --------------------------------------------------
// Breakpoint settings
$hdpi-ratio: 1.3 !default;
$breakpoints: (
	'xxlarge':		 						(min-width: 120.0625em),												// >= 1921px
	'xlarge':			 						(max-width: 120em),															// <= 1920px
	'xlarge-only': 						(min-width: 90.0625em) and (max-width: 120em),	// 1441px - 1920px
	'large':			 						(max-width: 90em),															// <= 1440px
	'large-only':	 						(min-width: 64.0625em) and (max-width: 90em),		// 1025px - 1440px
	'medium':			 						(max-width: 64em),															// <= 1024px
	'medium-only': 						(min-width: 40.0625em) and (max-width: 64em),		// 641px - 1024px
	'not-small':	 						(min-width: 40.0625em),													// >= 641px
	'small':			 						(max-width: 40em),															// <= 640px
	'xsmall':			 						(max-width: 30em),															// <= 480px
	'xxsmall':		 						(max-width: 20em),															// <= 320px
	'iphone3':		 						(min-device-width: 320px) and (max-device-width: 480px) and (-webkit-device-pixel-ratio: 1),
	'iphone3-landscape':		 	(min-device-width: 320px) and (max-device-width: 480px) and (-webkit-device-pixel-ratio: 1) and (orientation: landscape),
	'iphone3-portrait':				(min-device-width: 320px) and (max-device-width: 480px) and (-webkit-device-pixel-ratio: 1) and (orientation: portrait),
	'iphone4':		 						(min-device-width: 320px) and (max-device-width: 480px) and (-webkit-device-pixel-ratio: 2) and (device-aspect-ratio: 2/3),
	'iphone4-landscape':			(min-device-width: 320px) and (max-device-width: 480px) and (-webkit-device-pixel-ratio: 2) and (device-aspect-ratio: 2/3) and (orientation: landscape),
	'iphone4-portrait':				(min-device-width: 320px) and (max-device-width: 480px) and (-webkit-device-pixel-ratio: 2) and (device-aspect-ratio: 2/3) and (orientation: portrait),
	'iphone5':		 						(min-device-width: 320px) and (max-device-width: 568px) and (-webkit-device-pixel-ratio: 2) and (device-aspect-ratio: 40/71),
	'iphone5-landscape':			(min-device-width: 320px) and (max-device-width: 568px) and (-webkit-device-pixel-ratio: 2) and (device-aspect-ratio: 40/71) and (orientation: landscape),
	'iphone5-portrait':		 		(min-device-width: 320px) and (max-device-width: 568px) and (-webkit-device-pixel-ratio: 2) and (device-aspect-ratio: 40/71) and (orientation: portrait),
	'iphone6':		 						(min-device-width: 375px) and (max-device-width: 667px) and (-webkit-device-pixel-ratio: 2),
	'iphone6-landscape':			(min-device-width: 375px) and (max-device-width: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape),
	'iphone6-portrait':		 		(min-device-width: 375px) and (max-device-width: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait),
	'iphone6-plus':						(min-device-width: 414px) and (max-device-width: 736px) and (-webkit-device-pixel-ratio: 3),
	'iphone6-plus-landscape':	(min-device-width: 414px) and (max-device-width: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape),
	'iphone6-plus-portrait':	(min-device-width: 414px) and (max-device-width: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait),
	'ipad':		 		 						(min-device-width: 768px) and (max-device-width: 1024px),
	'ipad-landscape':		 			(min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape),
	'ipad-portrait':		 			(min-device-width: 768px) and (max-device-width: 1024px) and (orientation: portrait),
	'ipad-retina': 						(min-device-width: 768px) and (max-device-width: 1024px) and (-webkit-device-pixel-ratio: 2),
	'ipad-retina-landscape': 	(min-device-width: 768px) and (max-device-width: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape),
	'ipad-retina-portrait': 	(min-device-width: 768px) and (max-device-width: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait),
	'hdpi':				 						"(-webkit-min-device-pixel-ratio: $hdpi-ratio),
														only screen and (min--moz-device-pixel-ratio: $hdpi-ratio),
														only screen and (-moz-min-device-pixel-ratio: $hdpi-ratio),
														only screen and (-o-min-device-pixel-ratio: #{$hdpi-ratio}/1),
														only screen and (min-resolution: #{round($hdpi-ratio*96)}dpi),
														only screen and (min-resolution: #{$hdpi-ratio}dppx)",
);
@mixin bp($break, $viewport1: null) {
	// Check if we are just passing a default value
	@if not $viewport1 {
		@if map-has-key($breakpoints, $break) {
			@media only screen and #{inspect(map-get($breakpoints, $break))} { @content; }
		}
		@else {
			@warn "Couldn't find a breakpoint named `#{$break}`.";
		}
	}
	@else {
		// Min breakpoint
		@if $break == min {
			@media screen and (min-width: $viewport1) { @content; }
		}
		// Max breakpoint
		@else if $break == max {
			@media screen and (max-width: $viewport1) { @content; }
		}
		// Custom breakpoint
		@else {
			@media screen and (min-width: $break) and (max-width: $viewport1) { @content; }
		}
	}
}

// --------------------------------------------------
// BORDER RADIUS
// --------------------------------------------------

// Single side border radius
// -------------------------
@mixin border-top-radius($radius) {
	border-top-right-radius: $radius;
	border-top-left-radius: $radius;
}
@mixin border-right-radius($radius) {
	border-top-right-radius: $radius;
	border-bottom-right-radius: $radius;
}
@mixin border-bottom-radius($radius) {
	border-bottom-right-radius: $radius;
	border-bottom-left-radius: $radius;
}
@mixin border-left-radius($radius) {
	border-top-left-radius: $radius;
	border-bottom-left-radius: $radius;
}

// --------------------------------------------------
// TRANSFORMATIONS
// --------------------------------------------------
@mixin transform-single($property, $value) {
	transform: #{$property}unquote("("#{$value}")");
}
@mixin rotate($deg) {
	@include transform-single(rotate, $deg);
}
@mixin rotateX($deg) {
	@include transform-single(rotateX, $deg);
}
@mixin rotateY($deg) {
	@include transform-single(rotateY, $deg);
}
@mixin rotateZ($deg) {
	@include transform-single(rotateZ, $deg);
}
@mixin rotate3d($rotate3d...) {
	@include transform-single(rotate3d, $rotate3d);
}
@mixin scale($ratio) {
	@include transform-single(scale, $ratio);
}
@mixin scaleX($ratio) {
	@include transform-single(scaleX, $ratio);
}
@mixin scaleY($ratio) {
	@include transform-single(scaleY, $ratio);
}
@mixin scaleZ($ratio) {
	@include transform-single(scaleZ, $ratio);
}
@mixin scale3d($x, $y, $z) {
	$multi-var: $x, $y, $z;
	@include transform-single(scale3d, $multi-var);
}
@mixin skew($x, $y) {
	$multi-var: $x, $y;
	@include transform-single(skew, $multi-var);
	backface-visibility: hidden;
}
@mixin skewX($deg) {
	@include transform-single(skewX, $deg);
	backface-visibility: hidden;
}
@mixin skewY($deg) {
	@include transform-single(skewY, $deg);
	backface-visibility: hidden;
}
@mixin translate($x, $y) {
	$multi-var: $x, $y;
	@include transform-single(translate, $multi-var);
}
@mixin translateX($x) {
	@include transform-single(translateX, $x);
}
@mixin translateY($y) {
	@include transform-single(translateY, $y);
}
@mixin translateZ($z) {
	@include transform-single(translateZ, $z);
}
@mixin translate3d($x, $y, $z) {
	$multi-var: $x, $y, $z;
	@include transform-single(translate3d, $multi-var);
}

// --------------------------------------------------
// UTILITIES / EXTRAS
// --------------------------------------------------

// Emboss Effect
// -------------
@mixin box-emboss($opacity, $opacity2){
	box-shadow: rgba(white,$opacity) 0 1px 0, inset rgba(black,$opacity2) 0 1px 0;
}

// Letterpress Effect
// ------------------
@mixin letterpress($opacity){
	text-shadow: rgba(white,$opacity) 0 1px 0;
}

// Placeholder text
// ----------------
@mixin placeholder-color($color: #555555) {
	&::placeholder {
		color: $color;
	}
}

// Sizing
// ------
@mixin size($width, $height: $width) {
 width: $width;
 height: $height;
}
@mixin square($size) {
 @include size($size, $size);
}

// Add hover state
// ---------------
@mixin hoverer($attr, $normal, $hovered) {
	#{$attr}: #{$normal};
	&:hover {
		#{$attr}: #{$hovered};
	}
}

// Add responsive styling for multiple widths
// ------------------------------------------
@mixin responsive($attr, $full, $medium:false, $small:false) {
	#{$attr}: #{$full};
	@if $medium {
		@include bp(medium) {
			#{$attr}: #{$medium};
		}
	}
	@if $small {
		@include bp(small) {
			#{$attr}: #{$small};
		}
	}
}

// Create an triangle using borders (add in the option to make a border)
// Cut down on the code (Use sass maps for "trbl" and translate direction, maybe even direction and border direction)
// http://cssarrowplease.com/
// ------------------------------------------------------------------
@mixin triangle($direction: "right", $size: "0.5rem", $color: "black", $center: false, $element: "after") {
	&:#{$element} {
		@if not $center {
			position: absolute;
		}
		content:"";
		@include square(0);
		border: #{$size} solid transparent;
		@if $direction == "up" {
			border-bottom-color: #{$color};
			@if $center {
				@include absolute(null,null,100%,50%);
				transform: translateX(-#{$size});
			}
		}
		@if $direction == "right" {
			border-left-color: #{$color};
			@if $center {
				@include absolute(50%,null,null,100%);
				transform: translateY(-#{$size});
			}
		}
		@if $direction == "down" {
			border-top-color: #{$color};
			@if $center {
				@include absolute(100%,null,null,50%);
				transform: translateX(-#{$size});
			}
		}
		@if $direction == "left" {
			border-right-color: #{$color};
			@if $center {
				@include absolute(50%,100%);
				transform: translateY(-#{$size});
			}
		}
	}
}

// Advanced Positioning
// ------------------------------------------------------
$default-position: null !default;
@mixin position($type, $top: $default-position, $right: $default-position, $bottom: $default-position, $left: $default-position) {
	position: #{$type};
	$allowed_types: "absolute" "relative" "fixed";
	@if not index($allowed_types, $type) {
		@warn "Unknown position: #{$type}.";
	}
	@each $data in top $top, right $right, bottom $bottom, left $left {
		#{nth($data, 1)}: nth($data, 2);
	}
}
@mixin absolute($top: $default-position, $right: $default-position, $bottom: $default-position, $left: $default-position) {
	@include position("absolute", $top, $right, $bottom, $left);
}
@mixin relative($top: $default-position, $right: $default-position, $bottom: $default-position, $left: $default-position) {
	@include position("relative", $top, $right, $bottom, $left);
}
@mixin fixed($top: $default-position, $right: $default-position, $bottom: $default-position, $left: $default-position) {
	@include position("fixed", $top, $right, $bottom, $left);
}

// Clearfix
// --------
%clearfix {
 *zoom: 1;
 &:before,
 &:after {
	 display: table;
	 content:"";
	 line-height: 0;
 }
 &:after {
	 clear: both;
 }
}

// Hide text
// ---------
%hide-text {
 font: 0/0 a;
 color: transparent;
 text-shadow: none;
}

// Center an element
// -----------------
%centerer {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

// Center an element vertically
// ----------------------------
%vert-centerer {
	position: relative;
	top: 50%;
	transform: translateY(-50%);
}

// Cover everything
// ----------------
%coverer {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}

// Center-align a block level element
// ----------------------------------
%center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}


// --------------------------------------------------
// FUNCTIONS
// --------------------------------------------------

// Mix white with another color
// ----------------------------
@function tint($color, $percent){
	@return mix(white, $color, $percent);
}
 
// Mix black with another color
// ----------------------------
@function shade($color, $percent){
	@return mix(black, $color, $percent);
}

// Strip the units from a value
// ----------------------------
@function strip-units($value) {
	@return $value / ($value * 0 + 1);
}

// Calculate rems from a px value
// ------------------------------
$base-px: 16 !default;
@function rem-calc($px) {
	@if not unitless($px) {
		$px: strip-units($px);
	}
	@if not unitless($base-px) {
		$base-px: strip-units($base-px);
	}
	@return ($px / $base-px) * 1rem;
}

// Calculate ems from a px value
// ------------------------------
@function em-calc($px, $base-val: $base-px) {
	@if not unitless($px) {
		$px: strip-units($px);
	}
	@if not unitless($base-val) {
		$base-val: strip-units($base-val);
	}
	@return ($px / $base-val) * 1em;
}

// Create a random color
// ---------------------
@function random-color() {
	$red: random(256)-1;
	$green: random(256)-1;
	$blue: random(256)-1;
	@return rgb($red, $green, $blue);
}
